The question told us to build a recommendation system based on collaborative filtering

PROBLEMS ENCOUNTERED:-
The dataset did not have a single user column, or column that lists down various products. It simply had various purchases made on the site
Hence it wasn't possible to implement either User-based or item-item based collaborative filtering (since both of them require users that have rated various paroducts or equivalently product rated by users and we SELECT ONLY THOSE USERS/PRODUCTS WHO HAVE RATED/BEEN RATED ABOVE A THRESHOLD NO OF TIMES)

WHAT THE CODE DOES:-
1. The .py contains code to recommend (top K) most similar products based available in dataset having 18877 rows (which is a bit preprocessed from original raw_dataset) 
2. You input any index between (0,18877) and it recommends the products similar to it (with all the metadata of the product included)

STEPS to IMPLEMENT IT:-
The main idea was to encode all features in numerical form so that some sort of similarity between row vectors could be calculated 
1. removed various columns like product url, image, pid, uniq_val etc. Imputed various columns that had some entires missing. 
2. From the product_category_tree I figured out the broadest category of each purchase (The elements of product_category_tree was of the form [broadest_category>>_other_text>>...>>...]. Here the broadest category was the string before first appearnce of ">>" operator.
3. There were a total of 32 categories.
4. Around 327 samples did not have explicit categories so I tried to predict it using BOW model on the remaining dataset for which we knew the broadest categories. However the accuracy of such model was around 32% so it was not useful. Hence I removed all those 327 training examples because it is a relatively small number compared to rest of dataset.
5. One hot encoded all the categories and some other columns having categorical data
6. Defined a similarity function to calculate cosine similarity. (L2 norm is not used due to high sparsity)
7. Defined a getNeighbours function to recommend top K similar products.

Libraries - Keras, Pandas, Numpy, Sklearn, matplotlib.pyplot, operator
